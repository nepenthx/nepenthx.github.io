<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一些想做的东西</title>
    <url>/2024/09/19/%E4%B8%80%E4%BA%9B%E6%83%B3%E5%81%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<p>最近的工作、学习都不太顺利，越发意识到自己在能力上有所欠缺，扪心自问本人又缺乏自驱力，做事很少细致、规范，常常需要别人的约束。因此创建了这个博客，进行一些学习工作的技术分享、整理。</p>
<p>目前的规划是：</p>
<ul>
<li><p>代码重构</p>
</li>
<li><p>android技术细节整理</p>
</li>
<li><p>工作流学习、分享</p>
</li>
<li><p>一些个人项目的开发记录</p>
</li>
<li><p>一些心得感悟</p>
</li>
</ul>
<p>其实做了也主要是自己看吧（</p>
<p>欢迎大家与我沟通交流！</p>
]]></content>
      <categories>
        <category>目录</category>
      </categories>
      <tags>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title>代码重构原则</title>
    <url>/2024/09/18/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>阅读《重构：改善既有代码设计》做的一些代码设计规范相关的笔记：</p>
<h2 id="代码设计问题："><a href="#代码设计问题：" class="headerlink" title="代码设计问题："></a>代码设计问题：</h2><p>这里是书里提到的，以及我在编码过程中可能遇到的一些问题：（以下例子是工作时遇到的一些具体 case，以及平时自己写的一些不规范的代码）：</p>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>给函数、变量名、接口等命名时应该注意到命名的规范问题，也是最常用的重构手法。一个比较典型的例子是在设计<code>ChoreographerCalculator</code>的时候用了过多<code>time</code>的概念，比如事件开始的时间戳、事件结束的时间戳、帧持续的时间、甚至每种类型帧出现的次数，都被叫 time(s)，很容易造成歧义。</p>
<h3 id="重复代码"><a href="#重复代码" class="headerlink" title="重复代码"></a>重复代码</h3><p>一个例子是重写<code>dispatchTouchEvent</code>和<code>disTouchKeyEvent</code>的时候，里面有大量代码是重复的。比如按下后的<code>removeCallback</code>行为、抬起后的<code>setCallback</code>行为、获取页面信息的行为、改变 action 对象的行为等，都有重复的逻辑，而拆分开会导致后续维护可能会出现困难。</p>
<h3 id="过长函数、过长参数列表"><a href="#过长函数、过长参数列表" class="headerlink" title="过长函数、过长参数列表"></a>过长函数、过长参数列表</h3><p>&#x2F;&#x2F;比如这篇文章，其实就能拆成几篇来阅读（这篇就当一个大纲一样的东西吧，后续内容再分别补充）<br>书中的原文是：</p>
<blockquote>
<p>据我们的经验，活得最长、最好的程序，其中的函数都比较短。初次接触到 这种代码库的程序员常常会觉得“计算都没有发生”——程序里满是无穷无尽的委 托调用。但和这样的程序共处几年之后，你就会明白这些小函数的价值所在。间 接性带来的好处——更好的阐释力、更易于分享、更多的选择——都是由小函数来支持的。</p>
</blockquote>
<p>这是非常有道理的。最早期我自己写的代码就是一笔勾勒下去，洋洋洒洒几百行，不加注释不注意命名；事件一长再回头一看，完全不记得自己当时的思路是什么，维护起来也无从下手。印象里最深刻的是刚学<code>jetpack compose</code>时写的天气预报的 app，一个<code>@Composable</code>函数能写几千行，再回头看就和史一样。后面再做的时候，也会有意注意模块的拆分复用，保证可读性。但是人是认识不到自己能力以外的事物的，所以第一次见到师兄的代码确实是大受震撼，原来好的代码确实不需要加注释；再回头看自己优化过的代码，依旧读起来像一坨史。</p>
<p>还有一个养成坏习惯的原因，是 kotlin 有弱化类的概念，可以直接跳出类来使用函数（当然，这种弱化是和 java 相比）。学艺不精的我直接将很多变量直接传入 Composable 函数中并且在内部进行运算，导致的结果就是维护性是一坨，时间一长都不知道从何改起。（当然这不是 kotlin 的问题，这是我的问题）</p>
<h3 id="发散式变化、散弹式修改、依恋情结"><a href="#发散式变化、散弹式修改、依恋情结" class="headerlink" title="发散式变化、散弹式修改、依恋情结"></a>发散式变化、散弹式修改、依恋情结</h3><p>书里的翻译很雅，但是归根结底，个人觉得这三件事情说的都是 逻辑耦合 的问题。比如，在事件 A 发生时执行 B 计算，将二者的逻辑耦合在一起；也许是符合直觉的，但一个严重的问题是如果后续事件 B 发生了变化，或者有了新的计算 C 加入需要复用事件 A，就不可避免的需要重构代码；因此解耦合的设计就是相对“一劳永逸”的，也是可读性很高的优质代码。把不同的行为封装到不同的对象中，分工明确，便于扩展和维护，也就是这里说的发散。</p>
<h3 id="数据泥团"><a href="#数据泥团" class="headerlink" title="数据泥团"></a>数据泥团</h3><p>对于这个，我的理解是：把有逻辑关联的数据整合到一个相同的结构里。书里给出了一个很好的评判方法：</p>
<blockquote>
<p>删掉众多数据中的一项。如果这么做，其他数据有没有因而失去意义?如果它们不再有意义，这就是一个明确信号:你应该为它们产生一个新对象。</p>
</blockquote>
<h3 id="基本类型偏执"><a href="#基本类型偏执" class="headerlink" title="基本类型偏执"></a>基本类型偏执</h3><p>原话：</p>
<blockquote>
<p>大多数编程环境都大量使用基本类型，即整数、浮点数和字符串等。一些库 会引入一些小对象，如日期。但我们发现一个很有趣的现象:很多程序员不愿意 创建对自己的问题域有用的基本类型，如钱、坐标、范围等。于是，我们看到了 把钱当作普通数字来计算的情况、计算物理量时无视单位(如把英寸与毫米相 加)的情况以及大量类似 if (a &lt; upper &amp;&amp; a &gt; lower)这样的代码。</p>
</blockquote>
<p>记得 C++里面的 typeof：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">typeof <span class="type">int</span> Money;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一开始学的时候并不知道这种“多此一举”的行为有什么用，现在才觉得确实是深谋远虑呢。</p>
<h3 id="重复的-switch"><a href="#重复的-switch" class="headerlink" title="重复的 switch"></a>重复的 switch</h3><blockquote>
<p>如果你跟真正的面向对象布道者交谈，他们很快就会谈到 switch 语句的邪恶。在他们看来，任何 switch 语句都应该用以多态取代条件表达式(272)消除 掉。我们甚至还听过这样的观点:所有条件逻辑都应该用多态取代，绝大多数 if 语句都应该被扫进历史的垃圾桶。</p>
</blockquote>
<p>确实有道理，所以我感觉我现在就有必要被扫到垃圾桶（<br>一个疑惑是这适合所有的场景吗？这个等后续深入学习以后再补充吧。</p>
<h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><p>用管道操作代替循环：<br>一开始不太理解，看到<a href="https://blog.csdn.net/fjjaylz/article/details/109962864">这个大哥的文章</a>以后醍醐灌顶。</p>
<h3 id="冗赘的元素、夸夸其谈通用性："><a href="#冗赘的元素、夸夸其谈通用性：" class="headerlink" title="冗赘的元素、夸夸其谈通用性："></a>冗赘的元素、夸夸其谈通用性：</h3><p>过度设计导致的，认为一个方法、一个类在未来可能会有用处，将其设计的过于复杂，事实上那天可能从未到来；<br>书中提到的陌生概念有 <strong>折叠内联体系、内联函数和内联类</strong>，随后这里专门做一个模块整理出来。</p>
<h3 id="message-chains"><a href="#message-chains" class="headerlink" title="message chains"></a>message chains</h3><p>这个看起来很简单，但是感觉实际做起来会很困难。先贴一下原话，等碰到具体的案例再具体补充吧</p>
<blockquote>
<p>如果你看到用户向一个对象请求另一个对象，然后再向后者请求另一个对 象，然后再请求另一个对象……这就是消息链。在实际代码中你看到的可能是一 长串取值函数或一长串临时变量。采取这种方式，意味客户端代码将与查找过程中的导航结构紧密耦合。一旦对象间的关系发生任何变化，客户端就不得不做出相应修改。<br>这时候应该使用<strong>隐藏委托关系</strong>。你可以在消息链的不同位置采用这 种重构手法。理论上，你可以重构消息链上的所有对象，但这么做就会把所有中间对象都变成“中间人”。通常更好的选择是:先观察消息链最终得到的对象是用来干什么的，看看能否以提炼函数(106)把使用该对象的代码提炼到一个独立的函数中，再运用搬移函数(198)把这个函数推入消息链。如果还有许多客户端代码需要访问链上的其他对象，同样添加一个函数来完成此事。<br>有些人把任何函数链都视为坏东西，我们不这样想。<strong>我们的冷静镇定是出了名的，起码在这件事上是这样的</strong>。(只是觉得很幽默才加粗的)</p>
</blockquote>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>读完之后确实有很多收获，也获得了接下来一段时间学习的方向。</p>
<p>过于直白的设计和过度设计都是不可取的，如何重构代码、设计一份优质的代码，也是很重要的学问。</p>
<p>过于直白的设计会造成很高的耦合性，我自己也已经写过太多这样的垃圾了（深感羞愧）</p>
<p>而关于过度设计，而还记得师兄带我review一个case，在一个地方初始化一个值，另外两个地方在初始化时读取这个值以进行互斥的启动或者不启动。初看的时候我觉得设计很不错（虽然一个开关写了三个job感觉有些多余），但是debug的时候师兄指出了一个很关键的问题：如果不启动，开关日志相关的打印就会很不合理（不打印），这是不符合工作逻辑的—A并不知道B会不会初始化，B也不知道A会不会初始化。从工作流来考虑这样的设计确实是有很多的问题。（当然比我很多代码设计已经强多了）</p>
<p>还有很多东西要学，加油吧。</p>
]]></content>
      <categories>
        <category>代码设计</category>
        <category>代码重构</category>
      </categories>
      <tags>
        <tag>重构代码</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于空指针和代码健壮性的一些思考</title>
    <url>/2024/09/20/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E5%81%A5%E5%A3%AE%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>代码生涯中遇到过很多空指针问题，在发现时确实让人显得很尴尬&#x3D;_&#x3D;</p>
<p>空指针问题，就我目前的认知而言一般发生在两方面：一方面，是代码设计的健壮性，单从代码的角度而言，就是没有对预期之外的错误输入进行处理；另一方面，是自己逻辑的完整性（或者说逻辑的健壮性），而这往往也是更让人感到尴尬的地方。</p>
<p>接下来就结合遇到的一些空指针问题，写一下自己的理解认知。</p>
<h2 id="初始化时机导致的空指针"><a href="#初始化时机导致的空指针" class="headerlink" title="初始化时机导致的空指针"></a>初始化时机导致的空指针</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>假如小明有一个类是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NullPointerExample</span> &#123;</span><br><span class="line">    <span class="comment">//假如这个类的使用依赖于一个关键对象；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Key key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Key key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key==<span class="literal">null</span>)&#123;</span><br><span class="line">           setKey(<span class="keyword">new</span> <span class="title class_">Key</span>().setConfig(<span class="string">&quot;default&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            setKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(Key key)</span> &#123;</span><br><span class="line">        NullPointerExample.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFunction</span><span class="params">(String doSomething)</span>&#123;</span><br><span class="line">        key.doSomething(doSomething);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Key</span>&#123;</span><br><span class="line">        <span class="comment">//某项重要的配置</span></span><br><span class="line">        <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Key <span class="title function_">setConfig</span><span class="params">(String config)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.config = config;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String doSomething)</span>&#123;</span><br><span class="line">            System.out.println(config);</span><br><span class="line">            System.out.println(config.length()+doSomething);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是随意举出的一个例子，比方说有一些人非常乐于使用框架来进行日志的打印，就可能会选择这个框架；使用框架有很多好处，比如他们可以随意添加打印的tag，可以随意实现很多次打印，甚至如果愿意还可以异步打印；或者大家一起玩加锁游戏，看最后谁打印的日志多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一位使用这个框架打印日志的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saySomething</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        NullPointerExample.testFunction(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后大家设置了一个job，当这个job启动时初始化这个日志打印框架：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块初始化入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitJob</span> &#123;</span><br><span class="line">    <span class="comment">//一个初始化的入口；这里可以传入自定义的配置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InitJob</span><span class="params">(NullPointerExample.Key key)</span> &#123;</span><br><span class="line">        NullPointerExample.init(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他初始化</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里是一个主入口，大家所有的功能、所有的job启动都采用这种方式进行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用来启动各种job的类的最简陋版实现方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainEnter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitJob</span>(<span class="keyword">new</span> <span class="title class_">NullPointerExample</span>.Key().setKey(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line">        Users.saySomething(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到这里为止，一切都运行的非常好，可以愉快完成它应该有的功能，大家可以尽情打印日志，哪怕在初始化的时候给他传入了一个null:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainEnter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitJob</span>(<span class="literal">null</span>);</span><br><span class="line">        Users.saySomething(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他也依然可以很好的打印出带有default的日志。</p>
<p>但是假如这个时候，有一个新的模块出现了（事实上业务逻辑错综复杂，可能有几百个模块,我们并不知道他们是以什么样的方式被启动，或者他们内部在做什么事情），而且它的优先级非常高：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainEnter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitNewJob</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitJob</span>(<span class="literal">null</span>);</span><br><span class="line">        Users.saySomething(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假如在这个InitNewJob中同样使用了NullPointerExample框架来打印日志，就毫无疑问会抛出空指针错误。（这正是我们（或者说我）想看到的，不然我为什么会给他起这么一个名字呢？）</p>
<p>这就是代码健壮性的问题，第一个是，业务逻辑并不牢固，并不能总是保证自己的函数不能第一时间执行到，而自己的逻辑又是依赖这一条件的；<br>第二个是，对于预期以外的输入，并没有用合适的方法去规避问题。（在这里就是初始化之前进行空指针检查）</p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>既然提出了问题，就要给出相应的解决方案。下面的方案有些是我想到的，有些是师兄指点的（可以猜一下哪个是师兄指点的）:</p>
<h4 id="判空返回"><a href="#判空返回" class="headerlink" title="判空返回"></a>判空返回</h4><p>比如说，当这并不是一个很重要的业务时，可能他只是用来做一些平常的事情，比如单纯试用你的异步框架来打印日志呢？或者你认为，这个对主要的业务逻辑&#x3D;&#x3D;并没有很大的影响&#x3D;&#x3D;，但是你需要立刻修复这个bug时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFunction</span><span class="params">(String doSomething)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(key==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">      key.doSomething(doSomething);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这种方式虽然简单，但他的缺陷也是很明显的：大家不会认为这是一个可靠的框架，他不会百分之百打印出我们想要的日志；因此大家会逐渐遗弃他，用别的更先进的日志框架来解决。甚至有些人想拿他做更重要的事情，比如打印更重要的日志，可能会有非常大的损失。</p>
<h4 id="判空，并初始化"><a href="#判空，并初始化" class="headerlink" title="判空，并初始化"></a>判空，并初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFunction</span><span class="params">(String doSomething)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(key==<span class="literal">null</span>)&#123;</span><br><span class="line">      key=<span class="keyword">new</span> <span class="title class_">Key</span>().setConfig(<span class="string">&quot;default!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">      key.doSomething(doSomething);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在这里判空，并初始化，是不是就可以了呢？小明打印一条日志试一下：嗯，很好，功能可以正常使用，即使没有初始化，他也可以很棒的打印日志。正准备很开心的给大家使用以打印日志时，小明突然想到一个问题：</p>
<p>假如很多人同时打印日志呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大家疯狂的打印日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainEnter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        Users.saySomething(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">                executor.submit(</span><br><span class="line">                        ()-&gt;&#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)&#123;</span><br><span class="line">                                Users.saySomething(<span class="string">&quot;你好&quot;</span>+<span class="string">&quot;---&quot;</span>+j);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitJob</span>(<span class="literal">null</span>);</span><br><span class="line">        Users.saySomething(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InitJob</span>(<span class="keyword">new</span> <span class="title class_">NullPointerExample</span>.Key().setConfig(<span class="string">&quot;原来是这样吗？&quot;</span>));</span><br><span class="line">        Users.saySomething(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然，这里可能会有线程安全的问题。这里只是简单的打印日志，但是如果有人在里面执行计算呢？很多人操作同一份数据呢？另外，即使不这样的话，init的时候对key进行初始化，不是也会导致线程安全问题吗？</p>
<p>&#x2F;&#x2F;今天太晚了，先写到这里吧，有空慢慢更新</p>
]]></content>
      <categories>
        <category>代码设计</category>
      </categories>
      <tags>
        <tag>健壮性</tag>
        <tag>Java，空指针</tag>
      </tags>
  </entry>
</search>
